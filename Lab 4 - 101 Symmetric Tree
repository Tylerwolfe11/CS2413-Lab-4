/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Main function to check if the tree is symmetric
    bool isSymmetric(TreeNode* root) {
        // An empty tree is symmetric
        if (!root) return true;

        // Check if the left and right subtrees are mirror images
        return isMirror(root->left, root->right);
    }

private:
    // Helper function to check if two trees are mirror images of each other
    bool isMirror(TreeNode* t1, TreeNode* t2) {
        // If both nodes are null, they are symmetric at this level
        if (!t1 && !t2) return true;

        // If only one of the nodes is null, the structure is not symmetric
        if (!t1 || !t2) return false;

        // Check if the current nodes are equal,
        // and recursively check their mirror subtrees:
        // - left subtree of t1 with right subtree of t2
        // - right subtree of t1 with left subtree of t2
        return (t1->val == t2->val) &&
               isMirror(t1->left, t2->right) &&
               isMirror(t1->right, t2->left);
    }
};

